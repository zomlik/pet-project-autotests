{"uid":"bd436cd704f0ff96","name":"Авторизация пользователя с не валидными данными","fullName":"tests.api.auth.test_auth.TestAuth#test_user_login","historyId":"56e8a9c8c7154e53f6046edd038e5fa5","time":{"start":1753344718273,"stop":1753344718326,"duration":53},"status":"failed","statusMessage":"AssertionError: Не верный статус код. exp:400, act:502","statusTrace":"self = <test_auth.TestAuth object at 0x7f018fb27860>\n\n    @allure.title(\"Авторизация пользователя с не валидными данными\")\n    @allure.testcase(\"ID-171\")\n    def test_user_login(self):\n        user_data = AuthNormalRequestModel(username=\"test\", password=\"123456\")\n        response = public_users_client().auth(user_data)\n    \n>       assert_status_code(HTTPStatus.BAD_REQUEST, response.status_code)\n\ntests/api/auth/test_auth.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected = <HTTPStatus.BAD_REQUEST: 400>, actual = 502\n\n    @allure.step(\"Проверка статус код равен {expected}\")\n    def assert_status_code(expected: int, actual: int) -> None:\n        \"\"\"\"\n        Проверяет, что фактический статус-код ответа соответствует ожидаемому.\n    \n        :param expected: Ожидаемый статус-код.\n        :param actual: Фактический статус-код ответа.\n        :raises AssertionError: Если статус-коды не совпадают.\n        \"\"\"\n        logger.info(f\"Check that response status code equals to {expected}\")\n>       assert actual == expected, f\"Не верный статус код. exp:{expected}, act:{actual}\"\n               ^^^^^^^^^^^^^^^^^^\nE       AssertionError: Не верный статус код. exp:400, act:502\n\nutils/asserts.py:22: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Не верный статус код. exp:400, act:502","statusTrace":"self = <test_auth.TestAuth object at 0x7f018fb27860>\n\n    @allure.title(\"Авторизация пользователя с не валидными данными\")\n    @allure.testcase(\"ID-171\")\n    def test_user_login(self):\n        user_data = AuthNormalRequestModel(username=\"test\", password=\"123456\")\n        response = public_users_client().auth(user_data)\n    \n>       assert_status_code(HTTPStatus.BAD_REQUEST, response.status_code)\n\ntests/api/auth/test_auth.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected = <HTTPStatus.BAD_REQUEST: 400>, actual = 502\n\n    @allure.step(\"Проверка статус код равен {expected}\")\n    def assert_status_code(expected: int, actual: int) -> None:\n        \"\"\"\"\n        Проверяет, что фактический статус-код ответа соответствует ожидаемому.\n    \n        :param expected: Ожидаемый статус-код.\n        :param actual: Фактический статус-код ответа.\n        :raises AssertionError: Если статус-коды не совпадают.\n        \"\"\"\n        logger.info(f\"Check that response status code equals to {expected}\")\n>       assert actual == expected, f\"Не верный статус код. exp:{expected}, act:{actual}\"\n               ^^^^^^^^^^^^^^^^^^\nE       AssertionError: Не верный статус код. exp:400, act:502\n\nutils/asserts.py:22: AssertionError","steps":[{"name":"Выполнение авторизации пользователя","time":{"start":1753344718313,"stop":1753344718319,"duration":6},"status":"passed","steps":[{"name":"Выполнение POST-Запроса","time":{"start":1753344718313,"stop":1753344718319,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'/auth'"},{"name":"json","value":"{'username': 'test', 'type': 'normal', 'password': '123456'}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"user_data","value":"AuthNormalRequestModel(username='test', type='normal', password='123456')"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Проверка статус код равен <HTTPStatus.BAD_REQUEST: 400>","time":{"start":1753344718319,"stop":1753344718319,"duration":0},"status":"failed","statusMessage":"AssertionError: Не верный статус код. exp:400, act:502\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/pet-project-autotests/pet-project-autotests/utils/asserts.py\", line 22, in assert_status_code\n    assert actual == expected, f\"Не верный статус код. exp:{expected}, act:{actual}\"\n           ^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"expected","value":"<HTTPStatus.BAD_REQUEST: 400>"},{"name":"actual","value":"502"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"5ed4079ba1dceec0","name":"log","source":"5ed4079ba1dceec0.txt","type":"text/plain","size":272},{"uid":"fc2b9010387fe876","name":"stderr","source":"fc2b9010387fe876.txt","type":"text/plain","size":301}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"API"},{"name":"epic","value":"Пользователи"},{"name":"feature","value":"Auth"},{"name":"tag","value":"users"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.api.auth"},{"name":"suite","value":"test_auth"},{"name":"subSuite","value":"TestAuth"},{"name":"host","value":"pkrvmpptgkbjq6m"},{"name":"thread","value":"5440-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.auth.test_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"ID-171","url":"ID-171","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"e79ba9e892cbb833","reportUrl":"https://zomlik.github.io/pet-project-autotests/2//#testresult/e79ba9e892cbb833","status":"failed","statusDetails":"AssertionError: assert 405 == <HTTPStatus.UNAUTHORIZED: 401>\n +  where 405 = <Response [405 Not Allowed]>.status_code\n +  and   <HTTPStatus.UNAUTHORIZED: 401> = HTTPStatus.UNAUTHORIZED","time":{"start":1753077886109,"stop":1753077886155,"duration":46}}]},"tags":["auth","API","users"]},"source":"bd436cd704f0ff96.json","parameterValues":[]}